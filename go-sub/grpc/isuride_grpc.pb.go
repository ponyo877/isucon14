// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: isuride.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SubService_AppNotification_FullMethodName   = "/isuride.SubService/AppNotification"
	SubService_ChairNotification_FullMethodName = "/isuride.SubService/ChairNotification"
	SubService_MinCostFlow_FullMethodName       = "/isuride.SubService/MinCostFlow"
	SubService_StoreUserToken_FullMethodName    = "/isuride.SubService/StoreUserToken"
	SubService_StoreChairToken_FullMethodName   = "/isuride.SubService/StoreChairToken"
)

// SubServiceClient is the client API for SubService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubServiceClient interface {
	AppNotification(ctx context.Context, in *AppNotificationRequest, opts ...grpc.CallOption) (*AppNotificationResponse, error)
	ChairNotification(ctx context.Context, in *ChairNotificationRequest, opts ...grpc.CallOption) (*ChairNotificationResponse, error)
	MinCostFlow(ctx context.Context, in *MinCostFlowRequest, opts ...grpc.CallOption) (*MinCostFlowResponse, error)
	StoreUserToken(ctx context.Context, in *StoreUserTokenRequest, opts ...grpc.CallOption) (*StoreUserTokenResponse, error)
	StoreChairToken(ctx context.Context, in *StoreChairTokenRequest, opts ...grpc.CallOption) (*StoreChairTokenResponse, error)
}

type subServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubServiceClient(cc grpc.ClientConnInterface) SubServiceClient {
	return &subServiceClient{cc}
}

func (c *subServiceClient) AppNotification(ctx context.Context, in *AppNotificationRequest, opts ...grpc.CallOption) (*AppNotificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppNotificationResponse)
	err := c.cc.Invoke(ctx, SubService_AppNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subServiceClient) ChairNotification(ctx context.Context, in *ChairNotificationRequest, opts ...grpc.CallOption) (*ChairNotificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChairNotificationResponse)
	err := c.cc.Invoke(ctx, SubService_ChairNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subServiceClient) MinCostFlow(ctx context.Context, in *MinCostFlowRequest, opts ...grpc.CallOption) (*MinCostFlowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MinCostFlowResponse)
	err := c.cc.Invoke(ctx, SubService_MinCostFlow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subServiceClient) StoreUserToken(ctx context.Context, in *StoreUserTokenRequest, opts ...grpc.CallOption) (*StoreUserTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreUserTokenResponse)
	err := c.cc.Invoke(ctx, SubService_StoreUserToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subServiceClient) StoreChairToken(ctx context.Context, in *StoreChairTokenRequest, opts ...grpc.CallOption) (*StoreChairTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreChairTokenResponse)
	err := c.cc.Invoke(ctx, SubService_StoreChairToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubServiceServer is the server API for SubService service.
// All implementations must embed UnimplementedSubServiceServer
// for forward compatibility.
type SubServiceServer interface {
	AppNotification(context.Context, *AppNotificationRequest) (*AppNotificationResponse, error)
	ChairNotification(context.Context, *ChairNotificationRequest) (*ChairNotificationResponse, error)
	MinCostFlow(context.Context, *MinCostFlowRequest) (*MinCostFlowResponse, error)
	StoreUserToken(context.Context, *StoreUserTokenRequest) (*StoreUserTokenResponse, error)
	StoreChairToken(context.Context, *StoreChairTokenRequest) (*StoreChairTokenResponse, error)
	mustEmbedUnimplementedSubServiceServer()
}

// UnimplementedSubServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSubServiceServer struct{}

func (UnimplementedSubServiceServer) AppNotification(context.Context, *AppNotificationRequest) (*AppNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppNotification not implemented")
}
func (UnimplementedSubServiceServer) ChairNotification(context.Context, *ChairNotificationRequest) (*ChairNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChairNotification not implemented")
}
func (UnimplementedSubServiceServer) MinCostFlow(context.Context, *MinCostFlowRequest) (*MinCostFlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MinCostFlow not implemented")
}
func (UnimplementedSubServiceServer) StoreUserToken(context.Context, *StoreUserTokenRequest) (*StoreUserTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreUserToken not implemented")
}
func (UnimplementedSubServiceServer) StoreChairToken(context.Context, *StoreChairTokenRequest) (*StoreChairTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreChairToken not implemented")
}
func (UnimplementedSubServiceServer) mustEmbedUnimplementedSubServiceServer() {}
func (UnimplementedSubServiceServer) testEmbeddedByValue()                    {}

// UnsafeSubServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubServiceServer will
// result in compilation errors.
type UnsafeSubServiceServer interface {
	mustEmbedUnimplementedSubServiceServer()
}

func RegisterSubServiceServer(s grpc.ServiceRegistrar, srv SubServiceServer) {
	// If the following call pancis, it indicates UnimplementedSubServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SubService_ServiceDesc, srv)
}

func _SubService_AppNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubServiceServer).AppNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubService_AppNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubServiceServer).AppNotification(ctx, req.(*AppNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubService_ChairNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChairNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubServiceServer).ChairNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubService_ChairNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubServiceServer).ChairNotification(ctx, req.(*ChairNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubService_MinCostFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MinCostFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubServiceServer).MinCostFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubService_MinCostFlow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubServiceServer).MinCostFlow(ctx, req.(*MinCostFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubService_StoreUserToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreUserTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubServiceServer).StoreUserToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubService_StoreUserToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubServiceServer).StoreUserToken(ctx, req.(*StoreUserTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubService_StoreChairToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreChairTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubServiceServer).StoreChairToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubService_StoreChairToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubServiceServer).StoreChairToken(ctx, req.(*StoreChairTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SubService_ServiceDesc is the grpc.ServiceDesc for SubService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "isuride.SubService",
	HandlerType: (*SubServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppNotification",
			Handler:    _SubService_AppNotification_Handler,
		},
		{
			MethodName: "ChairNotification",
			Handler:    _SubService_ChairNotification_Handler,
		},
		{
			MethodName: "MinCostFlow",
			Handler:    _SubService_MinCostFlow_Handler,
		},
		{
			MethodName: "StoreUserToken",
			Handler:    _SubService_StoreUserToken_Handler,
		},
		{
			MethodName: "StoreChairToken",
			Handler:    _SubService_StoreChairToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "isuride.proto",
}
